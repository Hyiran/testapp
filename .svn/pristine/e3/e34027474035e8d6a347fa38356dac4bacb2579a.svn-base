package com.ctc.mail.common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;

public class IOManagerUtil {
	/**
	 * 合并单元格
	 * @param strList 要合并的单元格列表如:$F$2:$H$2
	 */
	public static void addMergedRegion(HSSFSheet sheet,String[] regions){
		if(regions != null){
			for(int i = 0; i < regions.length; i++){
				//合并单元格CellRangeAddress构造参数依次表示起始行，截至行，起始列， 截至列  
				//sheet.addMergedRegion(new CellRangeAddress(0,0,0,3)); 
				sheet.addMergedRegion(CellRangeAddress.valueOf(regions[i]));
			}	
		}
		
	}
	
	/**
	 * 创建表头
	 * @param book
	 * @param header
	 */
	public static void createHeader(HSSFWorkbook book,HSSFSheet sheet,String [] header){
		if(header != null){
			for(int i = 0 ; i < header.length; i++){
				HSSFRow row = sheet.createRow(i);// 创建所需的行数
				String [] cols = header[i].split(",");
				for (int j = 0; j < cols.length; j++) {
				  HSSFCell cell = null; // 设置单元格的数据类型
				  cell = row.createCell(j, HSSFCell.CELL_TYPE_STRING);
				  cell.setCellValue(cols[j]); // 设置单元格的值
				  cell.setCellStyle(setCellStyle(book));
				}
			}
		}
	}
	
	/**
	 * 从数据库导出为Excel
	 * @param fileUrl
	 * @param sheetName
	 * @param bodyResultSet
	 * @param header
	 * @param regions
	 * @throws IOException
	 * @throws SQLException
	 */
	public static void writeToExcelFile(String fileUrl, String sheetName,ResultSet bodyResultSet,String[] header,String[] regions) throws IOException, SQLException{
		int lastRowNum = 0;//最后一行
		int cols = bodyResultSet.getMetaData().getColumnCount();
		int rows = 0;
		File file = new File(fileUrl);
		
		//文件如果不存在，则创建；如果存在，则修改；
		if(!file.exists()){
			if(!file.getParentFile().exists()){
				file.getParentFile().mkdirs();
			}
			@SuppressWarnings("resource")
			HSSFWorkbook newBook = new HSSFWorkbook(); // 新建一个工作簿
			FileOutputStream newOutput = new FileOutputStream(file);
			newBook.write(newOutput);
			newOutput.close();
		}
		//读取文件内容
		FileInputStream oldInput = new FileInputStream(file);
		
		@SuppressWarnings("resource")
		HSSFWorkbook oldBook = new HSSFWorkbook(oldInput); // 新建一个工作簿
		HSSFSheet sheet = oldBook.getSheet(sheetName); // 获取表格
		if (sheet == null) {
			sheet = oldBook.createSheet(sheetName); // 新建一个表格
		}
		
		createHeader(oldBook,sheet,header);
		
		lastRowNum = sheet.getLastRowNum() + 1; // 获取已存在数据的行数
		while(bodyResultSet.next()){
			HSSFRow row = sheet.createRow(rows + lastRowNum);// 创建所需的行数
			for (int j = 0; j < cols; j++) {
			  HSSFCell cell = null; // 设置单元格的数据类型
			  cell = row.createCell(j, HSSFCell.CELL_TYPE_STRING);
			  try {
				  cell.setCellValue(Double.parseDouble(bodyResultSet.getString(j+1)));
				} catch (NumberFormatException e) {
					cell.setCellValue(bodyResultSet.getString(j+1)); 
				}   
			  // 设置单元格的值
			  cell.setCellStyle(setCellStyle(oldBook));//设置单元格格式
			}
			rows ++;
	    }
		
		addMergedRegion(sheet,regions);
		
		FileOutputStream oldOutput = new FileOutputStream(file);
		oldBook.write(oldOutput);
		oldOutput.close();
	}
	
	/**
	 * 设置样式
	 * @param book excel文件
	 * @param color 颜色
	 * @return
	 */
	public static HSSFCellStyle setCellStyle(HSSFWorkbook book){
		HSSFCellStyle style = book.createCellStyle();
		
		//style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND); //设置单元格填充样式 SOLID_FOREGROUND纯色使用前景颜色填充
		style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		style.setBorderLeft(HSSFCellStyle.BORDER_THIN); // 设置边界的类型单元格的左边框
		style.setBorderRight(HSSFCellStyle.BORDER_THIN);
		style.setBorderTop(HSSFCellStyle.BORDER_THIN);
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);// 设置单元格为水平对齐的类型
		style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER); //设置垂直居中
		return style;
	}
}
